--- Source/JavaScriptCore/API/JSStringRef.cpp	2012-04-24 01:29:20.000000000 +0200
+++ Source/JavaScriptCore/API/JSStringRef.cpp	2012-05-16 21:32:39.207430215 +0200
@@ -36,7 +36,7 @@
 JSStringRef JSStringCreateWithCharacters(const JSChar* chars, size_t numChars)
 {
     initializeThreading();
-    return OpaqueJSString::create(chars, numChars).leakRef();
+    return OpaqueJSString::create(reinterpret_cast<const UChar*>(chars), numChars).leakRef();
 }
 
 JSStringRef JSStringCreateWithUTF8CString(const char* string)
@@ -72,7 +72,7 @@
 
 const JSChar* JSStringGetCharactersPtr(JSStringRef string)
 {
-    return string->characters();
+    return reinterpret_cast<const JSChar*>(string->characters());
 }
 
 size_t JSStringGetMaximumUTF8CStringSize(JSStringRef string)
--- Source/JavaScriptCore/wtf/gobject/GlibUtilities.cpp	2012-04-24 03:38:21.000000000 +0200
+++ Source/JavaScriptCore/wtf/gobject/GlibUtilities.cpp	2012-05-16 21:38:33.894529392 +0200
@@ -54,7 +54,7 @@
     if (!length || (length == MAX_PATH && GetLastError() == ERROR_INSUFFICIENT_BUFFER))
         return CString();
 
-    String path(buffer, length);
+    String path(reinterpret_cast<UChar*>(buffer), length);
     return path.utf8();
 }
 #endif
--- Source/WebCore/plugins/win/PluginDatabaseWin.cpp	2012-04-24 03:35:29.000000000 +0200
+++ Source/WebCore/plugins/win/PluginDatabaseWin.cpp	2012-05-16 22:02:48.376004172 +0200
@@ -98,15 +98,15 @@
         if (result != ERROR_SUCCESS)
             break;
 
-        WCHAR pathStr[_MAX_PATH];
+        UChar pathStr[_MAX_PATH];
         DWORD pathStrSize = sizeof(pathStr);
         DWORD type;
 
-        result = SHGetValue(key, name, TEXT("Path"), &type, (LPBYTE)pathStr, &pathStrSize);
+        result = SHGetValueW(key, name, L"Path", &type, (LPBYTE)pathStr, &pathStrSize);
         if (result != ERROR_SUCCESS || type != REG_SZ)
             continue;
 
-        paths.add(String(pathStr, pathStrSize / sizeof(WCHAR) - 1));
+        paths.add(String(pathStr, pathStrSize / sizeof(UChar) - 1));
     }
 
     RegCloseKey(key);
@@ -127,7 +127,7 @@
     for (Vector<String>::const_iterator it = m_pluginDirectories.begin(); it != end; ++it) {
         String pattern = *it + "\\*";
 
-        hFind = FindFirstFileW(pattern.charactersWithNullTermination(), &findFileData);
+        hFind = FindFirstFileW(reinterpret_cast<LPCWSTR>(pattern.charactersWithNullTermination()), &findFileData);
 
         if (hFind == INVALID_HANDLE_VALUE)
             continue;
@@ -136,7 +136,7 @@
             if (findFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
                 continue;
 
-            String filename = String(findFileData.cFileName, wcslen(findFileData.cFileName));
+            String filename = String(reinterpret_cast<UChar*>(findFileData.cFileName), wcslen(findFileData.cFileName));
             if ((!filename.startsWith("np", false) || !filename.endsWith("dll", false)) &&
                 (!equalIgnoringCase(filename, "Plugin.dll") || !it->endsWith("Shockwave 10", false)))
                 continue;
@@ -210,15 +210,15 @@
     HKEY key;
     LONG result;
     
-    result = RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Mozilla"), 0, KEY_READ, &key);
+    result = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"Software\\Mozilla", 0, KEY_READ, &key);
     if (result == ERROR_SUCCESS) {
-        WCHAR name[128];
+        UChar name[128];
         FILETIME lastModified;
 
         // Enumerate subkeys
         for (int i = 0;; i++) {
-            DWORD nameLen = sizeof(name) / sizeof(WCHAR);
-            result = RegEnumKeyExW(key, i, name, &nameLen, 0, 0, 0, &lastModified);
+            DWORD nameLen = sizeof(name) / sizeof(UChar);
+            result = RegEnumKeyExW(key, i, reinterpret_cast<LPWSTR>(name), &nameLen, 0, 0, 0, &lastModified);
 
             if (result != ERROR_SUCCESS)
                 break;
@@ -227,18 +227,18 @@
             HKEY extensionsKey;
 
             // Try opening the key
-            result = RegOpenKeyEx(key, extensionsPath.charactersWithNullTermination(), 0, KEY_READ, &extensionsKey);
+            result = RegOpenKeyExW(key, reinterpret_cast<LPCWSTR>(extensionsPath.charactersWithNullTermination()), 0, KEY_READ, &extensionsKey);
 
             if (result == ERROR_SUCCESS) {
                 // Now get the plugins directory
-                WCHAR pluginsDirectoryStr[_MAX_PATH];
+                UChar pluginsDirectoryStr[_MAX_PATH];
                 DWORD pluginsDirectorySize = sizeof(pluginsDirectoryStr);
                 DWORD type;
 
-                result = RegQueryValueEx(extensionsKey, TEXT("Plugins"), 0, &type, (LPBYTE)&pluginsDirectoryStr, &pluginsDirectorySize);
+                result = RegQueryValueExW(extensionsKey, L"Plugins", 0, &type, (LPBYTE)&pluginsDirectoryStr, &pluginsDirectorySize);
 
                 if (result == ERROR_SUCCESS && type == REG_SZ)
-                    directories.append(String(pluginsDirectoryStr, pluginsDirectorySize / sizeof(WCHAR) - 1));
+                    directories.append(String(pluginsDirectoryStr, pluginsDirectorySize / sizeof(UChar) - 1));
 
                 RegCloseKey(extensionsKey);
             }
@@ -252,33 +252,32 @@
 {
 #if !OS(WINCE)
     // The new WMP Firefox plugin is installed in \PFiles\Plugins if it can't find any Firefox installs
-    WCHAR pluginDirectoryStr[_MAX_PATH + 1];
-    DWORD pluginDirectorySize = ::ExpandEnvironmentStringsW(TEXT("%SYSTEMDRIVE%\\PFiles\\Plugins"), pluginDirectoryStr, WTF_ARRAY_LENGTH(pluginDirectoryStr));
-
+    UChar pluginDirectoryStr[_MAX_PATH + 1];
+    DWORD pluginDirectorySize = ::ExpandEnvironmentStringsW(L"%SYSTEMDRIVE%\\PFiles\\Plugins", reinterpret_cast<LPWSTR>(pluginDirectoryStr), _countof(pluginDirectoryStr));
     if (pluginDirectorySize > 0 && pluginDirectorySize <= WTF_ARRAY_LENGTH(pluginDirectoryStr))
         directories.append(String(pluginDirectoryStr, pluginDirectorySize - 1));
 #endif
 
     DWORD type;
-    WCHAR installationDirectoryStr[_MAX_PATH];
+    UChar installationDirectoryStr[_MAX_PATH];
     DWORD installationDirectorySize = sizeof(installationDirectoryStr);
 
-    HRESULT result = SHGetValue(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\MediaPlayer"), TEXT("Installation Directory"), &type, (LPBYTE)&installationDirectoryStr, &installationDirectorySize);
+    HRESULT result = SHGetValueW(HKEY_LOCAL_MACHINE, L"Software\\Microsoft\\MediaPlayer", L"Installation Directory", &type, (LPBYTE)&installationDirectoryStr, &installationDirectorySize);
 
     if (result == ERROR_SUCCESS && type == REG_SZ)
-        directories.append(String(installationDirectoryStr, installationDirectorySize / sizeof(WCHAR) - 1));
+        directories.append(String(installationDirectoryStr, installationDirectorySize / sizeof(UChar) - 1));
 }
 
 static inline void addQuickTimePluginDirectory(Vector<String>& directories)
 {
     DWORD type;
-    WCHAR installationDirectoryStr[_MAX_PATH];
+    UChar installationDirectoryStr[_MAX_PATH];
     DWORD installationDirectorySize = sizeof(installationDirectoryStr);
 
-    HRESULT result = SHGetValue(HKEY_LOCAL_MACHINE, TEXT("Software\\Apple Computer, Inc.\\QuickTime"), TEXT("InstallDir"), &type, (LPBYTE)&installationDirectoryStr, &installationDirectorySize);
+    HRESULT result = SHGetValueW(HKEY_LOCAL_MACHINE, L"Software\\Apple Computer, Inc.\\QuickTime", L"InstallDir", &type, (LPBYTE)&installationDirectoryStr, &installationDirectorySize);
 
     if (result == ERROR_SUCCESS && type == REG_SZ) {
-        String pluginDir = String(installationDirectoryStr, installationDirectorySize / sizeof(WCHAR) - 1) + "\\plugins";
+        String pluginDir = String(installationDirectoryStr, installationDirectorySize / sizeof(UChar) - 1) + "\\plugins";
         directories.append(pluginDir);
     }
 }
@@ -286,11 +285,11 @@
 static inline void addAdobeAcrobatPluginDirectory(Vector<String>& directories)
 {
     HKEY key;
-    HRESULT result = RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Adobe\\Acrobat Reader"), 0, KEY_READ, &key);
+    HRESULT result = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"Software\\Adobe\\Acrobat Reader", 0, KEY_READ, &key);
     if (result != ERROR_SUCCESS)
         return;
 
-    WCHAR name[128];
+    UChar name[128];
     FILETIME lastModified;
 
     Vector<int> latestAcrobatVersion;
@@ -298,8 +297,8 @@
 
     // Enumerate subkeys
     for (int i = 0;; i++) {
-        DWORD nameLen = sizeof(name) / sizeof(WCHAR);
-        result = RegEnumKeyExW(key, i, name, &nameLen, 0, 0, 0, &lastModified);
+        DWORD nameLen = sizeof(name) / sizeof(UChar);
+        result = RegEnumKeyExW(key, i, reinterpret_cast<LPWSTR>(name), &nameLen, 0, 0, 0, &lastModified);
 
         if (result != ERROR_SUCCESS)
             break;
@@ -313,14 +312,14 @@
 
     if (!latestAcrobatVersionString.isNull()) {
         DWORD type;
-        WCHAR acrobatInstallPathStr[_MAX_PATH];
+        UChar acrobatInstallPathStr[_MAX_PATH];
         DWORD acrobatInstallPathSize = sizeof(acrobatInstallPathStr);
 
         String acrobatPluginKeyPath = "Software\\Adobe\\Acrobat Reader\\" + latestAcrobatVersionString + "\\InstallPath";
-        result = SHGetValue(HKEY_LOCAL_MACHINE, acrobatPluginKeyPath.charactersWithNullTermination(), 0, &type, (LPBYTE)acrobatInstallPathStr, &acrobatInstallPathSize);
+        result = SHGetValueW(HKEY_LOCAL_MACHINE, reinterpret_cast<LPCWSTR>(acrobatPluginKeyPath.charactersWithNullTermination()), 0, &type, (LPBYTE)acrobatInstallPathStr, &acrobatInstallPathSize);
 
         if (result == ERROR_SUCCESS) {
-            String acrobatPluginDirectory = String(acrobatInstallPathStr, acrobatInstallPathSize / sizeof(WCHAR) - 1) + "\\browser";
+            String acrobatPluginDirectory = String(acrobatInstallPathStr, acrobatInstallPathSize / sizeof(UChar) - 1) + "\\browser";
             directories.append(acrobatPluginDirectory);
         }
     }
@@ -331,11 +330,11 @@
 static inline void addJavaPluginDirectory(Vector<String>& directories)
 {
     HKEY key;
-    HRESULT result = RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\JavaSoft\\Java Plug-in"), 0, KEY_READ, &key);
+    HRESULT result = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"Software\\JavaSoft\\Java Plug-in", 0, KEY_READ, &key);
     if (result != ERROR_SUCCESS)
         return;
 
-    WCHAR name[128];
+    UChar name[128];
     FILETIME lastModified;
 
     Vector<int> latestJavaVersion;
@@ -343,8 +342,8 @@
 
     // Enumerate subkeys
     for (int i = 0;; i++) {
-        DWORD nameLen = sizeof(name) / sizeof(WCHAR);
-        result = RegEnumKeyExW(key, i, name, &nameLen, 0, 0, 0, &lastModified);
+        DWORD nameLen = sizeof(name) / sizeof(UChar);
+        result = RegEnumKeyExW(key, i, reinterpret_cast<LPWSTR>(name), &nameLen, 0, 0, 0, &lastModified);
 
         if (result != ERROR_SUCCESS)
             break;
@@ -358,18 +357,18 @@
 
     if (!latestJavaVersionString.isEmpty()) {
         DWORD type;
-        WCHAR javaInstallPathStr[_MAX_PATH];
+        UChar javaInstallPathStr[_MAX_PATH];
         DWORD javaInstallPathSize = sizeof(javaInstallPathStr);
         DWORD useNewPluginValue;
         DWORD useNewPluginSize;
 
         String javaPluginKeyPath = "Software\\JavaSoft\\Java Plug-in\\" + latestJavaVersionString;
-        result = SHGetValue(HKEY_LOCAL_MACHINE, javaPluginKeyPath.charactersWithNullTermination(), TEXT("UseNewJavaPlugin"), &type, (LPVOID)&useNewPluginValue, &useNewPluginSize);
+        result = SHGetValueW(HKEY_LOCAL_MACHINE, reinterpret_cast<LPCWSTR>(javaPluginKeyPath.charactersWithNullTermination()), L"UseNewJavaPlugin", &type, (LPVOID)&useNewPluginValue, &useNewPluginSize);
 
         if (result == ERROR_SUCCESS && useNewPluginValue == 1) {
-            result = SHGetValue(HKEY_LOCAL_MACHINE, javaPluginKeyPath.charactersWithNullTermination(), TEXT("JavaHome"), &type, (LPBYTE)javaInstallPathStr, &javaInstallPathSize);
+            result = SHGetValueW(HKEY_LOCAL_MACHINE, reinterpret_cast<LPCWSTR>(javaPluginKeyPath.charactersWithNullTermination()), L"JavaHome", &type, (LPBYTE)javaInstallPathStr, &javaInstallPathSize);
             if (result == ERROR_SUCCESS) {
-                String javaPluginDirectory = String(javaInstallPathStr, javaInstallPathSize / sizeof(WCHAR) - 1) + "\\bin\\new_plugin";
+                String javaPluginDirectory = String(javaInstallPathStr, javaInstallPathSize / sizeof(UChar) - 1) + "\\bin\\new_plugin";
                 directories.append(javaPluginDirectory);
             }
         }
@@ -380,19 +379,19 @@
 
 static inline String safariPluginsDirectory()
 {
-    WCHAR moduleFileNameStr[_MAX_PATH];
+    UChar moduleFileNameStr[_MAX_PATH];
     static String pluginsDirectory;
     static bool cachedPluginDirectory = false;
 
     if (!cachedPluginDirectory) {
         cachedPluginDirectory = true;
 
-        int moduleFileNameLen = GetModuleFileName(0, moduleFileNameStr, _MAX_PATH);
+        int moduleFileNameLen = GetModuleFileNameW(0, reinterpret_cast<LPWSTR>(moduleFileNameStr), _MAX_PATH);
 
         if (!moduleFileNameLen || moduleFileNameLen == _MAX_PATH)
             goto exit;
 
-        if (!PathRemoveFileSpec(moduleFileNameStr))
+        if (!PathRemoveFileSpecW(reinterpret_cast<LPWSTR>(moduleFileNameStr)))
             goto exit;
 
         pluginsDirectory = String(moduleFileNameStr) + "\\Plugins";
@@ -404,17 +403,17 @@
 static inline void addMacromediaPluginDirectories(Vector<String>& directories)
 {
 #if !OS(WINCE)
-    WCHAR systemDirectoryStr[MAX_PATH];
+    UChar systemDirectoryStr[MAX_PATH];
 
-    if (!GetSystemDirectory(systemDirectoryStr, WTF_ARRAY_LENGTH(systemDirectoryStr)))
+    if (!GetSystemDirectoryW(reinterpret_cast<LPWSTR>(systemDirectoryStr), WTF_ARRAY_LENGTH(systemDirectoryStr)))
         return;
 
-    WCHAR macromediaDirectoryStr[MAX_PATH];
+    UChar macromediaDirectoryStr[MAX_PATH];
 
-    PathCombine(macromediaDirectoryStr, systemDirectoryStr, TEXT("macromed\\Flash"));
+    PathCombineW(reinterpret_cast<LPWSTR>(macromediaDirectoryStr), reinterpret_cast<LPWSTR>(systemDirectoryStr), L"macromed\\Flash");
     directories.append(macromediaDirectoryStr);
 
-    PathCombine(macromediaDirectoryStr, systemDirectoryStr, TEXT("macromed\\Shockwave 10"));
+    PathCombineW(reinterpret_cast<LPWSTR>(macromediaDirectoryStr), reinterpret_cast<LPWSTR>(systemDirectoryStr), L"macromed\\Shockwave 10");
     directories.append(macromediaDirectoryStr);
 #endif
 }
--- Source/WebCore/plugins/win/PluginPackageWin.cpp	2012-04-23 01:26:58.000000000 +0200
+++ Source/WebCore/plugins/win/PluginPackageWin.cpp	2012-09-04 10:56:43.706367981 +0200
@@ -47,7 +47,7 @@
     UINT bufferLength;
     String subInfo = "\\StringfileInfo\\040904E4\\" + info;
     bool retval = VerQueryValueW(versionInfoData,
-        const_cast<UChar*>(subInfo.charactersWithNullTermination()),
+        reinterpret_cast<LPCWSTR>(subInfo.charactersWithNullTermination()),
         &buffer, &bufferLength);
     if (!retval || bufferLength == 0)
         return String();
@@ -167,13 +167,13 @@
 bool PluginPackage::fetchInfo()
 {
     DWORD versionInfoSize, zeroHandle;
-    versionInfoSize = GetFileVersionInfoSizeW(const_cast<UChar*>(m_path.charactersWithNullTermination()), &zeroHandle);
+    versionInfoSize = GetFileVersionInfoSizeW(reinterpret_cast<LPCWSTR>(m_path.charactersWithNullTermination()), &zeroHandle);
     if (versionInfoSize == 0)
         return false;
 
     OwnArrayPtr<char> versionInfoData = adoptArrayPtr(new char[versionInfoSize]);
 
-    if (!GetFileVersionInfoW(const_cast<UChar*>(m_path.charactersWithNullTermination()),
+    if (!GetFileVersionInfoW(reinterpret_cast<LPCWSTR>(m_path.charactersWithNullTermination()),
             0, versionInfoSize, versionInfoData.get()))
         return false;
 
@@ -247,11 +247,11 @@
 
         String path = m_path.substring(0, m_path.reverseFind('\\'));
 
-        if (!::SetCurrentDirectoryW(path.charactersWithNullTermination()))
+        if (!::SetCurrentDirectoryW(reinterpret_cast<LPCWSTR>(path.charactersWithNullTermination())))
             return false;
 
         // Load the library
-        m_module = ::LoadLibraryExW(m_path.charactersWithNullTermination(), 0, LOAD_WITH_ALTERED_SEARCH_PATH);
+        m_module = ::LoadLibraryExW(reinterpret_cast<LPCWSTR>(m_path.charactersWithNullTermination()), 0, LOAD_WITH_ALTERED_SEARCH_PATH);
 
         if (!::SetCurrentDirectoryW(currentPath)) {
             if (m_module)
--- Source/WebCore/plugins/win/PluginViewWin.cpp	2012-08-20 18:30:25.000000000 +0200
+++ Source/WebCore/plugins/win/PluginViewWin.cpp	2012-09-04 10:48:03.743843969 +0200
@@ -886,13 +886,13 @@
 
     // Get file info
     WIN32_FILE_ATTRIBUTE_DATA attrs;
-    if (GetFileAttributesExW(filename.charactersWithNullTermination(), GetFileExInfoStandard, &attrs) == 0)
+    if (GetFileAttributesExW(reinterpret_cast<LPCWSTR>(filename.charactersWithNullTermination()), GetFileExInfoStandard, &attrs) == 0)
         return NPERR_FILE_NOT_FOUND;
 
     if (attrs.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
         return NPERR_FILE_NOT_FOUND;
 
-    HANDLE fileHandle = CreateFileW(filename.charactersWithNullTermination(), FILE_READ_DATA, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);
+    HANDLE fileHandle = CreateFileW(reinterpret_cast<LPCWSTR>(filename.charactersWithNullTermination()), FILE_READ_DATA, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);
     
     if (fileHandle == INVALID_HANDLE_VALUE)
         return NPERR_FILE_NOT_FOUND;
